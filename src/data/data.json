{
  "questions": [
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const toString = Object.prototype.toString;\nconst result = toString.call(null);"
      },
      "answers": [
        "[object Null]",
        "[object Object]",
        "null",
        "Null",
        "[Object]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Object.prototype.toString() method returns a string representing the object. It can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter.",
      "explanationEmphasizes": [
        "toString()",
        "Object.prototype.toString()",
        "Function.prototype.call()",
        "Function.prototype.apply()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst result = array[3];"
      },
      "answers": [
        "undefined",
        "3",
        "throw a SyntaxError",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "JavaScript arrays are zero-indexed: the first element of an array is at index 0, and the last element is at the index equal to the value of the array's length property minus 1. Using an invalid index number returns undefined.",
      "explanationEmphasizes": [
        "undefined",
        "0",
        "1",
        "zero-indexed",
        "length"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = Object.assign({\nname: \"JavaScript\"\n}, {\nname: \"ECMAScript\"\n}, {\nname: \"LiveScript\"\n});\n\nconst result = obj.name;"
      },
      "answers": [
        "LiveScript",
        "JavaScript",
        "ECMAScript",
        "JavaScript,ECMAScript,LiveScript",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. Properties in the target object will be overwritten by properties in the sources if they have the same key. Later sources' properties will similarly overwrite earlier ones.",
      "explanationEmphasizes": [
        "Object.assign()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3, 5];\nconst result = array.indexOf(3);"
      },
      "answers": [
        "2",
        "3",
        "-1",
        "5"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "JavaScript arrays are zero-indexed: the first element of an array is at index 0, and the last element is at the index equal to the value of the array's length property minus 1. The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
      "explanationEmphasizes": [
        "zero-indexed",
        "0",
        "1",
        "length",
        "indexOf()",
        "-1",
        "first index"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 2009;\nconst func = (x = 262) => {\nresult = x;\n}\nfunc(null);"
      },
      "answers": [
        "null",
        "2009",
        "262"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Default function parameters allow formal parameters to be initialized with default values if no value or undefined (not null) is passed.",
      "explanationEmphasizes": [
        "not null"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function () {\nreturn arguments.join(\"\");\n}\nconst result = func(2009, 262);"
      },
      "answers": [
        "throw a TypeError",
        "2271",
        "2009262",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The arguments object is an Array-like object corresponding to the arguments passed to a function. The arguments object is not an Array. It is similar to an Array, but does not have any Array properties except length. It does not have the join() method.",
      "explanationEmphasizes": [
        "Array-like object",
        "Array",
        "length",
        "join()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = \"10\" + 20 + 30;"
      },
      "answers": [
        "102030",
        "1050",
        "60",
        "NaN",
        "3030"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Implicit coercion to string is triggered by the binary + operator, when any operand is a string. Associativity determines the way in which operators of the same precedence are parsed. + operator has left-associativity.",
      "explanationEmphasizes": [
        "+",
        "left-associativity"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 0 || 1 && 2 || 3;"
      },
      "answers": [
        "2",
        "1",
        "0",
        "3",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "&& (logical AND) returns left operand if it can be converted to false; otherwise, returns right operand. || (logical OR) returns left operand if it can be converted to true; otherwise, returns right operand.",
      "explanationEmphasizes": [
        "&&",
        "||",
        "false",
        "true",
        "right operand",
        "left operand"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = [] == 0;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Loose equality compares two values for equality, after converting both values to a common type. When one of operand is number and the another one is array then array is converted to primitive value by attempting to invoke varying sequences of toString() and valueOf() methods on array. toString() for array in that case returns empty string \"\". Then we have \"\" == 10 expression. When one of operand is string and another one is number then string is converted to a number by attempting to invoke Number(\"\"). Number(\"\") equals 0. 0 == 0.",
      "explanationEmphasizes": [
        "toString()",
        "valueOf()",
        "\"\"",
        "\"\" == 10",
        "Number(\"\")",
        "0",
        "0 == 0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const \\u0061 = \"ECMAScript\";\nconst result = a;"
      },
      "answers": [
        "ECMAScript",
        "undefined",
        "throw a SyntaxError",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "This is a valid name for variable. In JavaScript it is converted to variable with name \"a\".",
      "explanationEmphasizes": [
        "JavaScript",
        "\"a\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const plus = +0;\nconst minus = -0;\nconst result = plus === minus;"
      },
      "answers": [
        "true",
        "false",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Signed zero is zero with an associated sign. In ordinary arithmetic, âˆ’0 = +0 = 0. However, in computing, some number representations allow for the existence of two zeros, often denoted by âˆ’0 (negative zero) and +0 (positive zero). This occurs in some signed number representations for integers, and in most floating point number representations. The number 0 is usually encoded as +0, but can be represented by either +0 or âˆ’0.",
      "explanationEmphasizes": [
        "âˆ’0 = +0 = 0",
        "+0",
        "âˆ’0",
        "0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "Which of this is the same as result += value?",
      "questionEmphasizes": [
        "result += value"
      ],
      "answers": [
        "result = result + value",
        "result = value",
        "result = value + value",
        "result = value++",
        "result = ++value"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The += (addition assignment) operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator.",
      "explanationEmphasizes": [
        " += "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = parseInt(\"Brendan\", 16);"
      },
      "answers": [
        "11",
        "NaN",
        "0",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems). An integer number parsed from the given string. If the first character cannot be converted to a number, NaN is returned. But in this case B (only the first character in this case) can be converted to 11. For radices above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used.",
      "explanationEmphasizes": [
        "parseInt()",
        "NaN",
        " B ",
        "11",
        "10",
        "9",
        "16"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const o = {\nname: \"Brendan\"\n};\nconst s = JSON.parse(JSON.stringify(o));\nconst result = s === o;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The JSON.stringify() method converts a JavaScript value to a JSON string. The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. JSON.parse() creates new object.",
      "explanationEmphasizes": [
        "JSON.stringify()",
        "JSON.parse()",
        "JSON string"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = \"2009\" - \"1995\";"
      },
      "answers": [
        "14",
        "NaN",
        "undefined",
        "throw a TypeError",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The - (subtraction operator) subtracts the two operands, producing their difference. It tries to convert both operands to number before evaluating. If cannot it returns NaN.",
      "explanationEmphasizes": [
        "NaN",
        "number",
        "-",
        " convert "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = \"00000\" == false;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "== converts both operands to numbers. 00000 becomes 0. false becomes 0.",
      "explanationEmphasizes": [
        "==",
        "00000",
        "0",
        "false"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = \"1\" == 1;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The equality operator converts the operands if they are not of the same type, then applies strict comparison. If both operands are objects, then JavaScript compares internal references which are equal when operands refer to the same object in memory. Implicit coercion to number is triggered by the == operator, when one of operand is a string and another one is a number.",
      "explanationEmphasizes": [
        "==",
        "string",
        "number"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "Which of these IS NOT a logical operator?",
      "questionEmphasizes": [
        "IS NOT"
      ],
      "answers": [
        "|",
        "&&",
        "||",
        "!"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "There are three logical operators in JavaScript: && (logical AND), || (logical OR) and ! (logical NOT). | is a bitwise OR operator.",
      "explanationEmphasizes": [
        "&&",
        "||",
        "!",
        "|",
        " logical "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = \"string\";\n(function () {\nresult = typeof arguments;\n})();"
      },
      "answers": [
        "\"object\"",
        "\"string\"",
        "\"array\"",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The arguments object is an Array-like object corresponding to the arguments passed to a function. The typeof arguments returns \"object\".",
      "explanationEmphasizes": [
        "Array-like object",
        "typeof",
        "\"object\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Math.min() < Math.max();"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The result is -Infinity for Math.max() if no arguments are given. The result is Infinity for Math.min() if no arguments are given.",
      "explanationEmphasizes": [
        "Math.max()",
        "Infinity",
        "-Infinity",
        "Math.min()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = new Array(5);\nconst result = array.toString();"
      },
      "answers": [
        ",,,,",
        "0",
        "5",
        "0,0,0,0,0",
        "Empty string"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The JavaScript Array object is a global object that is used in the construction of arrays. If the only argument passed to the Array constructor is an integer, this returns a new JavaScript array with its length property set to that number. This implies an array of 5 empty slots, not slots with actual undefined values. For Array objects, the toString() method joins the array and returns one string containing each array element separated by commas.",
      "explanationEmphasizes": [
        "undefined",
        "toString()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = [10] == 10;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Loose equality compares two values for equality, after converting both values to a common type. When one of operand is number and the another one is array then array is converted to primitive value by attempting to invoke varying sequences of toString() and valueOf() methods on array. toString() for array in that case returns \"10\" string. Then we have \"10\" == 10 expression. When one of operand is a string and another one is number then string is converted to a number by attempting to invoke Number(\"10\"). Number(\"10\") equals 10. 10 == 10.",
      "explanationEmphasizes": [
        "toString()",
        "valueOf()",
        "\"10\"",
        "\"10\" == 10",
        "Number(\"10\")",
        "10",
        "10 == 10"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const target = {\nname: \"ECMAScript\"\n};\n\nconst proxy = new Proxy(target, {});\nproxy.name = \"JavaScript\";\n\nconst result = target.name;"
      },
      "answers": [
        "JavaScript",
        "ECMAScript",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Proxy is an object in JavaScript which wraps an object or a function and monitors it via something called target. Irrespective of the wrapped object or function existence. Proxy are similar to meta programming in other languages.",
      "explanationEmphasizes": [
        "Proxy",
        "target"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = new Set([1, 1, 2, 3, 2, 3]);\nconst result = [...value];"
      },
      "answers": [
        "[ 1, 2, 3 ]",
        "[ 1, 1, 2, 3, 2, 3 ]",
        "[ 1 ]",
        "112323"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Set object lets you store unique values of any type, whether primitive values or object references. A value in the Set may only occur once; it is unique in the Set's collection. The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays or any iterable object into distinct variables.",
      "explanationEmphasizes": [
        "Set",
        "Set's collection"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const getA = () => 1;\nconst getB = () => 2;\nconst getC = () => 3;\nconst result = (getA(), getB(), getC());"
      },
      "answers": [
        "3",
        "1",
        "6",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.",
      "explanationEmphasizes": [
        "last operand"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const re = /java/i;\nconst str = \"JavaScript\";\nconst result = re.test(str);"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The test() method executes a search for a match between a regular expression and a specified string. The i flag in regular expression is used for case insensitivity.",
      "explanationEmphasizes": [
        "test()",
        " i "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const outside = function () {\nconst inside = () => arguments.length;\nreturn inside(262, 2009);\n};\n\nconst result = outside(1, 2, 3, 4, 5);"
      },
      "answers": [
        "5",
        "2",
        "undefined",
        "throw a ReferenceError",
        "7"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Arrow functions don't have the local variable arguments as do other functions. \"arguments\" belongs to \"outside\" function in the case.",
      "explanationEmphasizes": [
        "\"arguments\"",
        "\"outside\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = 20.0;\nconst result = Number.isInteger(value);"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Number.isInteger() method determines whether the passed value is an integer.",
      "explanationEmphasizes": [
        "Number.isInteger()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "Which is the correct JavaScript comment syntax?",
      "questionEmphasizes": [
        "comment syntax"
      ],
      "answers": [
        "/* Comment */",
        ">> Comment <<",
        "<< Comment >>",
        "/ Comment /"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Single line comments start with //. Any text between // and the end of the line will be ignored by JavaScript (will not be executed). Multi-line comments start with /* and end with */. Any text between /* and */ will be ignored by JavaScript.",
      "explanationEmphasizes": [
        "//",
        "/*",
        "*/"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "Which of the following is INCORRECT variable name?",
      "questionEmphasizes": [
        "INCORRECT"
      ],
      "answers": [
        "2result",
        "_result",
        "r1e2s3u4l5t",
        "$result",
        "_2result"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "All JavaScript variables must be identified with unique names. These unique names are called identifiers. Identifiers can be short names (like x and y) or more descriptive names (name, value, result). The general rules for constructing names for variables (unique identifiers) are: names can contain letters, digits, underscores, and dollar signs; names must begin with a letter or $ or _; names are case sensitive (y and Y are different variables); reserved words (like typeof or var keywords) cannot be used as names.",
      "explanationEmphasizes": [
        "typeof",
        "var "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const typedArray = new Int32Array([262, 95]);\nconst result = typedArray instanceof Array;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object. TypedArray has no Array prototype in prototype chain.",
      "explanationEmphasizes": [
        "instanceof",
        "TypedArray"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What will be shown to the console?",
      "questionEmphasizes": [
        "console"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "for (let i = 0; i < 5; i++) {\nsetTimeout(() => {\nconsole.log(i);\n}, 0);\n}"
      },
      "answers": [
        "outputs numbers 0, 1, 2, 3, 4",
        "outputs the number \"5\" five times",
        "outputs numbers from 0 to 5 five times",
        "throw a ReferenceError",
        "outputs numbers 1, 2, 3, 4, 5"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The let declaration creates a new variable i each time through the loop, so each function created inside the loop gets its own copy of i. Each copy of i has the value it was assigned at the beginning of the loop iteration in which it was created.",
      "explanationEmphasizes": [
        "let",
        " i "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function (a, b) {\nreturn arguments.length;\n}\nconst result = func(4, 3, 2, 1);"
      },
      "answers": [
        "4",
        "2",
        "0",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The arguments object is an Array-like object corresponding to the arguments passed to a function. arguments.length is a reference to the number of arguments passed to the function.",
      "explanationEmphasizes": [
        "Array-like object",
        "arguments.length"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const User = function () {\nconst result = new.target === User;\n};\n\nconst man = new User();"
      },
      "answers": [
        "true",
        "false",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The new.target property lets you detect whether a function or constructor was called using the new operator. In constructors and functions instantiated with the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.",
      "explanationEmphasizes": [
        "new.target",
        "undefined"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 95;\nconst RESULT = 2009;\nconst Result = 262;"
      },
      "answers": [
        "95",
        "2009",
        "262",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Result, RESULT, result are all valid different identifiers.",
      "explanationEmphasizes": [
        "result",
        "Result",
        "RESULT"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const constructor = function () {};\n\nconst result = constructor.prototype.constructor === constructor;"
      },
      "answers": [
        "true",
        "false",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Function.prototype.constructor returns a reference to the constructor function that created the instance object. The value of this property is a reference to the function itself.",
      "explanationEmphasizes": [
        "Function.prototype.constructor"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [10, 15, 20, 25, 30];\nconst result = array.find(v => v > 15);"
      },
      "answers": [
        "20",
        "15",
        "2",
        "3"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The find() method returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.",
      "explanationEmphasizes": [
        "find()",
        "undefined"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const plus = +0;\nconst minus = -0;\nconst result = Object.is(plus, minus);"
      },
      "answers": [
        "false",
        "true",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Object.is() and strict comparison operator behave exactly the same except for NaN and +0/-0. The === operator treats the number values -0 and +0 as equal, but Object.is() does not.",
      "explanationEmphasizes": [
        "Object.is()",
        "NaN",
        "+0/-0",
        "===",
        "-0",
        "+0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = {};\nconst result = \"toString\" in obj;"
      },
      "answers": [
        "true",
        "false",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The in operator returns true if the specified property is in the specified object or its prototype chain. \"toString\" is a method of Object.prototype.",
      "explanationEmphasizes": [
        " in ",
        "true",
        "\"toString\"",
        "Object.prototype"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const params = [1, 2, 3, 4, 5];\n\nconst result = Math.max.apply(10, params);"
      },
      "answers": [
        "5",
        "10",
        "6",
        "throw a SyntaxError",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Math.max() function returns the largest of zero or more numbers. The apply() method calls a function with a given this value, and arguments provided as an array. In the case 10 is ignored by the Math.max().",
      "explanationEmphasizes": [
        "Math.max()",
        "apply()",
        "10",
        "this"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "class User {\ngetName() {}\n}\nconst result = typeof User;"
      },
      "answers": [
        "\"function\"",
        "\"object\"",
        "\"class\"",
        "\"string\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The class declaration creates a new class with a given name using prototype-based inheritance. It is the same as if you use function declaration: \"function User () {}; User.prototype.getName = function () {};\". typeof returns \"function\" string for functions.",
      "explanationEmphasizes": [
        "typeof",
        "\"function\"",
        "\"function User () {}; User.prototype.getName = function () {};\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "function func (a, b) {\n\"use strict\";\na = 262;\nb = 95;\nconst result = arguments[1];\n};\n\nfunc(95, 262);"
      },
      "answers": [
        "262",
        "95",
        "throw a SyntaxError",
        "undefined",
        "1"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "In strict mode, the arguments object does not reflect changes to the named parameters. In non-strict mode, the arguments object reflects changes in the named parameters of a function if the parameters passed to function call.",
      "explanationEmphasizes": [
        "strict mode",
        "non-strict mode"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const map = v => v * v;\nconst array = Array.from([1, 2, 3], map);\nconst result = array.join(\"\");"
      },
      "answers": [
        "149",
        "14",
        "6",
        "1,2,3",
        "123"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object. Second parameter is a map function to call on every element of the array.",
      "explanationEmphasizes": [
        "Array.from()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 95;\nconst result = value++;"
      },
      "answers": [
        "95",
        "96",
        "97",
        "-95"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The increment operator increments (adds one to) its operand and returns a value. If used postfix, with operator after operand (for example, value++), then it returns the value before incrementing. If used prefix with operator before operand (for example, ++value), then it returns the value after incrementing.",
      "explanationEmphasizes": [
        "value++",
        "++value"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = \"JavaScript\";\nconst result = str.length;"
      },
      "answers": [
        "10",
        "11",
        "undefined",
        "9",
        "2"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The length property returns the length of a string (number of characters).",
      "explanationEmphasizes": [
        "length"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const first = function* () {\nyield 1;\nyield 2;\n}\nconst second = function* () {\nyield 3;\nyield 4;\nyield *first();\n}\n\nlet result = 0;\nfor (const value of second()) {\nif (typeof value === \"number\") {\nresult += value;\n}\n}"
      },
      "answers": [
        "10",
        "7",
        "\"7[object Object]\"",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object. The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol. The last yield of second generator will return iterable object. The for...of statement creates a loop iterating over iterable objects.",
      "explanationEmphasizes": [
        "function*",
        "Generator object",
        "second",
        "for...of"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "(function () {\n\"use strict\";\nconst result = this;\n}());"
      },
      "answers": [
        "undefined",
        "Window",
        "null",
        "throw a ReferenceError",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "In strict mode identifier this refers to undefined inside function body. In non-strict mode it will be bound to global object: Window in browser environment or Global object in Node.js environment.",
      "explanationEmphasizes": [
        "strict mode",
        "this",
        "undefined",
        "non-strict mode"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst result = 3 in array;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The in operator returns true if the specified property (not value) is in the specified object (array is an object too) or its prototype chain. 3 is a invalid index of the array.",
      "explanationEmphasizes": [
        " in ",
        "true",
        "3"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "Is JavaScript case sensitive?",
      "questionEmphasizes": [
        "case sensitive"
      ],
      "answers": [
        "yes",
        "no"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "JavaScript is case sensitive. For example, result, Result and RESULT are names of different variables.",
      "explanationEmphasizes": [
        "Result",
        "result",
        "RESULT"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 10;\nconst promise = new Promise((resolve) => {\nvalue = 20;\nresolve(30);\n});\nconst result = value;"
      },
      "answers": [
        "20",
        "10",
        "30",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value. The executor function is executed immediately by the Promise implementation, passing resolve and reject functions (the executor is called before the Promise constructor even returns the created object).",
      "explanationEmphasizes": [
        "Promise"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const object = new Object();\nconst proto = Object.getPrototypeOf(object);\n\nconst result = proto instanceof Object;"
      },
      "answers": [
        "false",
        "true",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object. Prototype of proto equals null and null is not instance of Object.",
      "explanationEmphasizes": [
        "instanceof",
        "proto",
        "null",
        "Object"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function (x, y = 4) {\nreturn x + y;\n}\n\nconst result = func(2);"
      },
      "answers": [
        "6",
        "2",
        "NaN",
        "undefined",
        "8"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed.",
      "explanationEmphasizes": [
        "undefined"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 2009;\nif (function func() {}) {\nresult += typeof func;\n}"
      },
      "answers": [
        "\"2009undefined\"",
        "\"2009function\"",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The if condition statement evaluates using coercion, so Boolean(function f(){}) returns true. Therefore, inside the if statement, executing typeof func returns undefined string because there is no function declaration.",
      "explanationEmphasizes": [
        " if ",
        "Boolean(function f(){})",
        "typeof",
        "undefined"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const numbers = [2009, 95, 262];\nconst [ first, ...rest ] = numbers;\n\nconst result = rest[1];"
      },
      "answers": [
        "262",
        "95",
        "throw a SyntaxError",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. When destructuring an array, you can unpack and assign the remaining part of it to a variable using the rest pattern.",
      "explanationEmphasizes": [
        "destructuring assignment"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = {\n\"b\": \"b\",\n\"0\": \"0\",\n\"a\": \"a\",\n\"2\": \"2\",\n\"1\": \"1\"\n};\n\nconst result = Object.keys(obj).join(\"\");"
      },
      "answers": [
        "012ba",
        "b0a21",
        "012ab",
        "ab012",
        "b0a12"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "JavaScript defines the following order for own property enumeration is: all numeric keys in ascending order, all string keys in the order in which they were added to the object, all symbol keys in the order in which they were added to the object.",
      "explanationEmphasizes": [
        "all numeric keys",
        "all string keys",
        "all symbol keys"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const first = 0.1 + 0.2 + 0.3;\nconst second = 0.3 + 0.2 + 0.1;\nconst result = first === second;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "JavaScript uses 64-bit floating point representation. The crux of the problem is that numbers are represented in this format as a whole number times a power of two; rational numbers (such as 0.1, which is 1/10) whose denominator is not a power of two cannot be exactly represented. Addition is performed left-to-right. 0.1 + 0.2 + 0.3 equals (0.1 + 0.2) + 0.3 = 0.3000000000000001 + 0.3 = 0.6000000000000001. 0.3 + 0.2 + 0.1 equals (0.3 + 0.2) + 0.1 = 0.5 + 0.1 = 0.6.",
      "explanationEmphasizes": [
        "0.1 + 0.2 + 0.3",
        "0.3 + 0.2 + 0.1",
        "64-bit"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3, 4, 5];\nconst result = array.fill(1, 2).join(\"\");"
      },
      "answers": [
        "12111",
        "12121",
        "1234512",
        "11345"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The fill() method takes up to three arguments: value, start and end. The fill() method fills all the elements of an array from a start index to an end index with a static value. The start and end arguments are optional with default values of 0 and the length of the this object.",
      "explanationEmphasizes": [
        "fill()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "// non strict mode\nconst obj = {\nname: \"JavaScript\"\n};\nObject.seal(obj);\nobj.name = \"ECMAScript\";\nconst result = obj.name;"
      },
      "answers": [
        "ECMAScript",
        "JavaScript",
        "null",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.",
      "explanationEmphasizes": [
        "Object.seal()",
        "non-configurable",
        "writable"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const o = {\nname: \"ECMAScript\",\nversion: 2016\n};\nconst result = Object.values(o).join(\"\");"
      },
      "answers": [
        "ECMAScript2016",
        "nameVersion",
        "null",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Object.values() returns an array whose elements are the enumerable property values found on the object. The ordering of the properties is the same as that given by looping over the property values of the object manually.",
      "explanationEmphasizes": [
        "Object.values()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Number.parseInt(\"1995 year\");"
      },
      "answers": [
        "1995",
        "undefined",
        "null",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Number.parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems). An integer number parsed from the given string. If the first character cannot be converted to a number, NaN is returned.",
      "explanationEmphasizes": [
        "Number.parseInt()",
        "NaN"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = +\"Infinity\" > 1;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "+\"Infinity\" converts string to Infinity number. And Infinity is greater than 1.",
      "explanationEmphasizes": [
        "+\"Infinity\"",
        "Infinity",
        "1"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let name = 1;\n({ name } = { name: 3 });\n\nconst result = name;"
      },
      "answers": [
        "3",
        "1",
        "throw a SyntaxError",
        "undefined",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.",
      "explanationEmphasizes": [
        "destructuring assignment syntax"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const push = Array.prototype.push;\nconst first = [2009, 95];\nconst second = [95, 2009];\n\nconst result = push.apply(first, second);"
      },
      "answers": [
        "4",
        "[ 2009, 95, 95, 2009 ]",
        "[ 95, 2009, 2009, 95 ]",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The push() method adds one or more elements to the end of an array and returns the new length of the array. The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object). It is the same as const result = first.push(...second);.",
      "explanationEmphasizes": [
        "push()",
        "apply()",
        "const result = first.push(...second);"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function () {\nreturn 2009;\n}\nconst result = 262 && func();"
      },
      "answers": [
        "2009",
        "262",
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "&& (logical AND) returns left operand if it can be converted to false; otherwise, returns right operand.",
      "explanationEmphasizes": [
        "&&",
        "false",
        "right operand",
        "left operand"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = new Set([1, 2, 3]);\nvalue.add(1);\nconst result = value.size;"
      },
      "answers": [
        "3",
        "4",
        "2",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Set object lets you store unique values of any type, whether primitive values or object references. A value in the Set may only occur once; it is unique in the Set's collection. Value 1 already exists inside the Set.",
      "explanationEmphasizes": [
        " Set ",
        "unique"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = ~~(12.34);"
      },
      "answers": [
        "12",
        "12.34",
        "-12",
        "-12.34"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "~ (bitwise NOT) inverts all the bits in the operand and returns a number. It removes everything after the decimal point because the bitwise operators implicitly convert their operands to signed 32-bit integers. This works whether the operands are (floating-point) numbers or strings, and the result is a number.",
      "explanationEmphasizes": [
        "~",
        "32-bit"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = \"1_2_3\".split(\"_\");"
      },
      "answers": [
        "[ \"1\", \"2\", \"3\" ]",
        "123",
        "[ 1, 2, 3 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The split() method splits a String object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split.",
      "explanationEmphasizes": [
        "split()",
        "String"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const slice = Array.prototype.slice;\nconst obj = {\n0: 1,\n1: 2,\n2: 3,\nlength: 2\n}\nconst result = slice.call(obj);"
      },
      "answers": [
        "[ 1, 2 ]",
        "[ 1, 2, 3 ]",
        "[ 0, 1 ]",
        "throw a TypeError",
        "3"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). slice() method can also be called to convert Array-like objects (the object which has length property and indexed properties) to a new Array.",
      "explanationEmphasizes": [
        "slice()",
        "Array-like object",
        " length ",
        " indexed "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const f = (r, v) => r + v;\nconst result = [1, 2, 3].reduce(f, 0);"
      },
      "answers": [
        "6",
        "5",
        "0"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The reduce() method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.",
      "explanationEmphasizes": [
        "reduce()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\narray.shift();\nconst result = array;"
      },
      "answers": [
        "[ 2, 3 ]",
        "[ 1, 2, 3 ]",
        "throw a TypeError",
        "[ undefined, 1, 2, 3 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.",
      "explanationEmphasizes": [
        "shift()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "function func (a, b = 2009) {\nconst result = arguments.length === func.length;\n};\n\nfunc(95, 262);"
      },
      "answers": [
        "false",
        "true",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Function.length is a property of a function object, and indicates how many arguments the function expects. This number excludes the rest parameter and only includes parameters before the first one with a default value. By contrast, arguments.length is local to a function and provides the number of arguments actually passed to the function.",
      "explanationEmphasizes": [
        "Function.length",
        "arguments.length"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nlet result = 1;\n\nfor (const value of array) {\nresult *= value;\n}"
      },
      "answers": [
        "6",
        "0",
        "throw a TypeError",
        "36"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The for...of statement creates a loop iterating over iterable objects (including the built-in String, Array, TypedArray, Map and Set, and user-defined iterables), invoking a custom iteration hook with statements to be executed for the value of each distinct property of the object.",
      "explanationEmphasizes": [
        "for...of",
        "String",
        "Array",
        "TypedArray",
        "Map",
        "Set"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const isTrue = false;\nconst result = isTrue ? 2009 : 262;"
      },
      "answers": [
        "262",
        "2009"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The conditional (ternary) operator is the only JavaScript operator that takes three operands. Syntax is condition ? expression1 : expression 2. If condition is true, the operator returns the value of expression1; otherwise, it returns the value of expression2.",
      "explanationEmphasizes": [
        "condition ? expression1 : expression 2",
        "true",
        "expression1",
        "expression2"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "How to convert an object into JSON string?",
      "questionEmphasizes": [
        "JSON string"
      ],
      "answers": [
        "JSON.stringify()",
        "JSON.parse()",
        "JSON.toString()",
        "JSON.valueOf()"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The JSON.stringify() method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
      "explanationEmphasizes": [
        "JSON.stringify()",
        "JSON string"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = (1, 2, 3);"
      },
      "answers": [
        "3",
        "1",
        "[ 1, 2, 3 ]",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.",
      "explanationEmphasizes": [
        "last operand"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 3 ** 3;"
      },
      "answers": [
        "27",
        "9",
        "throw a SyntaxError",
        "6",
        "12"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The exponentiation assignment operator ** evaluates to the result of raising first operand to the power second operand.",
      "explanationEmphasizes": [
        "**"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = -1 >> 32;"
      },
      "answers": [
        "-1",
        "0",
        "2147483647",
        "1"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": ">> operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. The number -1 is the integer that is composed completely of 1 bits. -1 (base 10) = 11111111111111111111111111111111 (base 2). So >> always returns -1 for -1.",
      "explanationEmphasizes": [
        ">>",
        "-1",
        "1"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Object.is(NaN, NaN);"
      },
      "answers": [
        "true",
        "false",
        "throw a SyntaxError",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The === operator treats the number values -0 and +0 as equal and treats NaN as not equal to NaN. Object.is() and strict comparison operator behave exactly the same except for NaN and +0/-0.",
      "explanationEmphasizes": [
        "===",
        "-0",
        "+0",
        "NaN",
        "Object.is()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 9;\nconst obj = {};\n\nobj: {\nvalue: ++value;\n};\nconst result = obj.value + value;"
      },
      "answers": [
        "NaN",
        "19",
        "throw a SyntaxError",
        "18",
        "20"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "obj: is just a labeled statement. It is prefixing a statement with an identifier which you can refer to. It is not modifying the variable with the same name. obj.value is undefined in that case. So undefined + number equals NaN.",
      "explanationEmphasizes": [
        "obj:",
        "obj.value",
        "undefined",
        "undefined + number",
        "NaN"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = !!null;"
      },
      "answers": [
        "false",
        "true",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "! (logical NOT) returns false if its single operand can be converted to true; otherwise, returns true. The value null represents the intentional absence of any object value and can be converted to false. !null converts to true. !!null converts to false.",
      "explanationEmphasizes": [
        "!",
        "!null",
        "!!null"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 2009;\nlet value = 262;\nconst obj = {\nvalue: 95\n};\nwith (obj) {\nresult = value;\n}"
      },
      "answers": [
        "95",
        "2009",
        "throw a ReferenceError",
        "262"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The with statement extends the scope chain for a statement. JavaScript looks up an unqualified name by searching a scope chain associated with the execution context of the script or function containing that unqualified name. The with statement adds the given object to the head of this scope chain during the evaluation of its statement body.",
      "explanationEmphasizes": [
        "with statement"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = null + [0,[1]][1][0];"
      },
      "answers": [
        "1",
        "0",
        "undefined",
        "NaN",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "[0,[1]][1][0] extracts 1 from inner array of [0,[1]]. 1 + null equals 0 in JavaScript. + operator converts null to 0.",
      "explanationEmphasizes": [
        "+",
        "[0,[1]][1][0]",
        "1",
        "[0,[1]]",
        "null",
        "0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 2009 instanceof Number;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object. For primitive data types it returns false, checks the prototype chain, finds undefined.",
      "explanationEmphasizes": [
        "instanceof"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "var value = 2009;\ndelete value;\nconst result = value;"
      },
      "answers": [
        "2009",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The JavaScript delete operator removes a property from an object. Any property declared with var cannot be deleted from the global scope or from a function's scope.",
      "explanationEmphasizes": [
        " delete ",
        "var"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const variable = null;\nconst result = typeof variable;"
      },
      "answers": [
        "\"object\"",
        "\"null\"",
        "\"undefined\"",
        "throw a TypeError",
        "\"0\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. null was represented as the NULL pointer (0x00 in most platforms). Consequently, null had 0 as type tag, hence the bogus typeof return value. A fix was proposed for ECMAScript (via an opt-in), but was rejected. It would have resulted in typeof null === \"null\".",
      "explanationEmphasizes": [
        "typeof",
        "0x00",
        "NULL",
        "0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = true * 10 - true;"
      },
      "answers": [
        "9",
        "0",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "* and - operators will convert boolean to a number. true to 1, false to 0.",
      "explanationEmphasizes": [
        "*",
        "-",
        "boolean",
        "number"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = null && undefined;"
      },
      "answers": [
        "null",
        "undefined",
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "&& operator returns left operand if it can be converted to false; otherwise, returns right operand. The following values are always falsy: false, 0 (zero), '' or \"\" (empty string), null, undefined, NaN.",
      "explanationEmphasizes": [
        "&&",
        " false",
        " 0 ",
        "''",
        "\"\"",
        "null",
        "undefined",
        "NaN"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const s = new Set([1, 1, 2, 3, 4, 4, 5, 5]);\nconst result = s.size;"
      },
      "answers": [
        "5",
        "8",
        "7",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Set object lets you store unique values of any type, whether primitive values or object references. A value in the Set may only occur once; it is unique in the Set's collection. size property returns the number of values in the Set object.",
      "explanationEmphasizes": [
        " Set ",
        "size"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Math.round(19.95);"
      },
      "answers": [
        "20",
        "19",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Math.round() function returns the value of a number rounded to the nearest integer.",
      "explanationEmphasizes": [
        "Math.round()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Number.MIN_VALUE > 0;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Number.MIN_VALUE property represents the smallest positive numeric value representable in JavaScript. Number.MIN_VALUE has a value of approximately 5e-324. Values smaller than Number.MIN_VALUE (underflow values) are converted to 0.",
      "explanationEmphasizes": [
        "Number.MIN_VALUE",
        "5e-324",
        "0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const Person = (name) => {\nthis.name = name;\n};\n\nconst man = new Person(\"Brendan\");\nconst result = man instanceof Person;"
      },
      "answers": [
        "throw a TypeError",
        "true",
        "false",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Arrow functions cannot be used as constructors and will throw an error when used with new. JavaScript has two different internal-only methods for functions: [[Call]] and [[Construct]]. When a function is called without new, the [[Call]] method is executed, which executes the body of the function as it appears in the code. When a function is called with new, thatâ€™s when the [[Construct]] method is called. The [[Construct]] method is responsible for creating a new object, called the instance, and then executing the function body with this set to the instance. Functions that have a [[Construct]] method are called constructors. Arrow functions do not have a [[Construct]] method.",
      "explanationEmphasizes": [
        "new",
        "[[Call]]",
        "[[Construct]]"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "class User {\nconstructor(name) {\nthis.name = name;\n}\nget name() {\nreturn \"James\";\n}\nset name(value) {}\ngetName() {\nreturn this.name;\n}\n}\nconst user = new User(\"Brendan\");\nconst result = user.getName();"
      },
      "answers": [
        "James",
        "Brendan",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "When you try to set name property to this.name set name() will be invoked. But when you try to retrieve this.name get name() will be invoked. The get syntax binds an object property to a function that will be called when that property is looked up. The set syntax binds an object property to a function to be called when there is an attempt to set that property.",
      "explanationEmphasizes": [
        "set name()",
        "get name()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 1 / 0;"
      },
      "answers": [
        "Infinity",
        "0",
        "1",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Division by 0 returns Infinity in JavaScript. Division by -0 returns -Infinity.",
      "explanationEmphasizes": [
        "Infinity",
        "-Infinity"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 2009;\n\n(function (value) {\ndelete value;\nif (value) {\nresult = value;\n}\n})(262);"
      },
      "answers": [
        "262",
        "2009",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically. Any property declared with var, let or const or defined as a parameter of the function cannot be deleted from the global scope or from a function's scope.",
      "explanationEmphasizes": [
        " delete ",
        "var",
        "let",
        "const"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = \"good\" > \"bad\";"
      },
      "answers": [
        "true",
        "false",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Strings are compared lexicographically in JavaScript. 'b' proceeds 'g' so the comparison \"good\" > \"bad\" returns true.",
      "explanationEmphasizes": [
        "'b'",
        "'g'",
        "\"good\" > \"bad\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [2009, NaN, 262];\nconst result = array.indexOf(NaN);"
      },
      "answers": [
        "-1",
        "0",
        "1",
        "2"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present. NaN compares unequal to any other value including to another NaN value. So indexOf() returns -1 in the case.",
      "explanationEmphasizes": [
        "indexOf()",
        "-1",
        "NaN"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = Math.PI;\nconst result = Math.ceil(value);"
      },
      "answers": [
        "4",
        "3",
        "NaN",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Math.PI property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159. The Math.ceil() function returns the smallest integer greater than or equal to a given number.",
      "explanationEmphasizes": [
        "Math.PI",
        "3.14159",
        "Math.ceil()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst map = (v, i) => v * i;\nconst result = array.map(map);"
      },
      "answers": [
        "[ 0, 2, 6 ]",
        "[ 1, 2, 3 ]",
        "[ 1, 4, 9 ]",
        "[ NaN, NaN, NaN ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The map() method creates a new array with the results of calling a provided function on every element in the calling array. Function that produces an element of the new Array, taking three arguments: 1) the current element being processed in the array, 2) the index of the current element being processed in the array, 3) the array map was called upon.",
      "explanationEmphasizes": [
        "map()",
        "1)",
        "2)",
        "3)"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 0;\n\ndo {\nvalue += 1;\n} while (false);\nconst result = value;"
      },
      "answers": [
        "1",
        "0",
        "throw a ReferenceError",
        "10"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.",
      "explanationEmphasizes": [
        "do...while"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Number(\"\") + 1;"
      },
      "answers": [
        "1",
        "0",
        "NaN",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "A primitive type object number is created using the Number() function. If the argument cannot be converted into a number, it returns NaN. In this case it is converted to 0.",
      "explanationEmphasizes": [
        "Number()",
        "NaN",
        "0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = {};\nconst result = Object.isPrototypeOf(obj);"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Object is not a prototype for obj. But Object.prototype is.",
      "explanationEmphasizes": [
        "Object",
        "Object.prototype"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What will be shown to the console?",
      "questionEmphasizes": [
        "console"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "for (var i = 0; i < 5; i++) {\nsetTimeout(() => {\nconsole.log(i);\n}, 0);\n}"
      },
      "answers": [
        "outputs the number 5 five times",
        "outputs numbers 0, 1, 2, 3, 4",
        "outputs numbers from 0 to 5 five times",
        "throw a ReferenceError",
        "outputs numbers 1, 2, 3, 4, 5"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The timeout function callbacks are all running well after the completion of the loop. As timers go, even if it was setTimeout(..., 0) on each iteration, all those function callbacks would still run strictly after the completion of the for loop. All of those functions, though they are defined separately in each loop iteration, are closed over the same shared global scope, which has only one i variable in it. The value of i variable will be 5 when for loop is finished.",
      "explanationEmphasizes": [
        "setTimeout(..., 0)",
        " i ",
        "5"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const first = Math.pow(2, 53);\nconst second = Math.pow(2, 53) + 1;\nconst result = first === second;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Math.pow(2, 53) evaluates to 9007199254740992. JavaScript uses double-precision floating-point format numbers as specified in IEEE 754 and can only safely represent numbers between -(2^53 - 1) and 2^53 - 1. Safe in this context refers to the ability to represent integers exactly and to correctly compare them. For example, Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2 will evaluate to true, which is mathematically incorrect.",
      "explanationEmphasizes": [
        "Math.pow(2, 53)",
        "9007199254740992",
        "-(2^53 - 1)",
        "2^53 - 1",
        "Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const numbers = [2009];\nconst [ first, second = 95 ] = numbers;\n\nconst result = second;"
      },
      "answers": [
        "95",
        "undefined",
        "throw a SyntaxError",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. A variable can be assigned a default, in the case that the value unpacked from the array is undefined.",
      "explanationEmphasizes": [
        "destructuring assignment syntax"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = \"2009\";\nconst result = isFinite(value);"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number. If the argument is NaN, positive infinity, or negative infinity, this method returns false; otherwise, it returns true.",
      "explanationEmphasizes": [
        "isFinite()",
        "NaN",
        "false",
        "true"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let someValue = 2009;\nfunction func() {\nsomeValue = 262;\nreturn;\nfunction someValue() {}\n}\nfunc();\n\nconst result = someValue;"
      },
      "answers": [
        "2009",
        "262",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "In JavaScript, the default action is for declarations to be moved to the top of the code. Declarations are moved to the top of the current scope by the JavaScript interpreter, meaning the top of the current function or scripts. All functions and variables are hoisted. function someValue() {} statement has created a local someValue that has a functional/local scope. This new someValue now gets hoisted to the top of its enclosing function func() with itâ€™s declaration and definition. The statement someValue = 262; is no longer changing the value of the global someValue which remains to be 2009, but rather it is changing the local someValue from a function to an integer value of 262.",
      "explanationEmphasizes": [
        "someValue() {}",
        "someValue",
        "someValue = 262;",
        "2009",
        "262"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = new Function(\"a\", \"b\", \"return a + b\");\n\nconst result = func(1, 2);"
      },
      "answers": [
        "3",
        "throw a SyntaxError",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "new Function([param1[, param2[, ...paramN]],] body) construction creates a new Function object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues similar to eval().",
      "explanationEmphasizes": [
        "new Function([param1[, param2[, ...paramN]],] body)",
        "eval()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const User = function (name) {\nthis.name = name;\nreturn {\nversion: \"JavaScript\"\n};\n}\n\nconst user = new User(\"Brendan\");\nconst result = user.name;"
      },
      "answers": [
        "undefined",
        "Brendan",
        "null",
        "JavaScript"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function. The object returned by the constructor function becomes the result of the whole new expression. In this case there is no name property in returned object.",
      "explanationEmphasizes": [
        " new "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const items = [95, 262, 2015, 2009];\nconst noop = (value) => value;\n\nfor (let i = 0; i < items.length; i++) {\nnoop(items[i]);\n}\n\nconst result = i;"
      },
      "answers": [
        "throw a ReferenceError",
        "4",
        "undefined",
        "0",
        "2009"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "let and const are block scoped. In this example, the variable i exists only within the for loop. When the loop is complete, the variable is no longer accessible elsewhere.",
      "explanationEmphasizes": [
        "let ",
        "const ",
        " i "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = (obj) => {\nobj = null;\n};\nconst obj = {\nname: \"Brendan\"\n};\nfunc(obj);\n\nconst result = obj.name;"
      },
      "answers": [
        "Brendan",
        "throw a ReferenceError",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "obj inside the func refers to a local variable not to an global variable with the same name.",
      "explanationEmphasizes": [
        "obj ",
        " func "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "Which IS NOT a primitive data type in JavaScript?",
      "questionEmphasizes": [
        "IS NOT"
      ],
      "answers": [
        "char",
        "boolean",
        "number",
        "string",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "A primitive (primitive value, primitive data type) is data that is not an object and has no methods. In JavaScript, there are 6 primitive data types: string, number, boolean, null, undefined, symbol.",
      "explanationEmphasizes": [
        "string",
        "number",
        "boolean",
        "null",
        "undefined",
        "symbol"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "var value = 2009;\nvar result = 95;\n(function () {\nresult = value;\nvar value = 262;\n})();"
      },
      "answers": [
        "undefined",
        "95",
        "2009",
        "262"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Hoisting is JavaScript's default behavior of moving all var declarations to the top of the current scope (to the top of the current function or current script). In the anonymous function declaration of local value variable will be hoisted at the top ot the function without initialization.",
      "explanationEmphasizes": [
        " var ",
        "value"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const firstArray = [1, 2, 3];\nconst secondArray = [1, 2, 3];\n\nconst result = firstArray == secondArray;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "firstArray and secondArray refer to different arrays. They are not equal.",
      "explanationEmphasizes": [
        "firstArray",
        "secondArray",
        "not equal"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = (() => {\ntry {\nreturn 262;\n} finally {\nreturn 2009;\n}\n})();"
      },
      "answers": [
        "2009",
        "262",
        "function"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "When you use finally, any code within that block fires before the method exits. Because you're using a return in the finally block, it calls return 2009 and overrides the previous return 262 in the try block.",
      "explanationEmphasizes": [
        "finally",
        "262",
        "2009",
        "try"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst result = array.join();"
      },
      "answers": [
        "1,2,3",
        "123",
        "6",
        "throw a TypeError",
        "1 2 3"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The join([separator]) method joins all elements of an array (or an array-like object) into a string and returns this string. separator specifies a string to separate each pair of adjacent elements of the array. The separator is converted to a string if necessary. If omitted, the array elements are joined with a comma \",\" string.",
      "explanationEmphasizes": [
        "join([separator])",
        "separator",
        "\",\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let text = \"ECMAScript\";\nconst result = text.charAt(1);"
      },
      "answers": [
        "C",
        "E",
        "M",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The String object's charAt() method returns a new string consisting of the single character located at the specified offset into the string.",
      "explanationEmphasizes": [
        "charAt()",
        "character"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = \"JavaScript\";\nconst result = str.replace(/a/g, \"e\");"
      },
      "answers": [
        "JeveScript",
        "JevaScript",
        "JaveScript",
        "ECMAScript"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. To perform a global search and replace, include the g flag in the regular expression.",
      "explanationEmphasizes": [
        "replace()",
        " g "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = NaN === NaN;"
      },
      "answers": [
        "false",
        "true",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "NaN compares unequal (via != and !==) to any other value including to another NaN value. Use Number.isNaN() or isNaN() to most clearly determine whether a value is NaN.",
      "explanationEmphasizes": [
        "NaN",
        "Number.isNaN()",
        "isNaN()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 3, 5, 3, 10];\nconst result = array.lastIndexOf(3);"
      },
      "answers": [
        "3",
        "1",
        "-1",
        "4",
        "2"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards.",
      "explanationEmphasizes": [
        "lastIndexOf()",
        "-1"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 95;\nconst func = function () {\nthis.value = value++;\nreturn func;\n};\n\nconst result = (new new func).value;"
      },
      "answers": [
        "undefined",
        "95",
        "96",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function. The object returned by the constructor function becomes the result of the whole new expression. Function is object in JavaScript. If the constructor function doesn't explicitly return an object, the object bounded to this is used instead. In the case func is returned twice instead of this object. And func has no property value.",
      "explanationEmphasizes": [
        " new ",
        " func ",
        " this ",
        "value"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "function func() {\nreturn;\n}\n\nconst result = func();"
      },
      "answers": [
        "undefined",
        "null",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The return [expression]; statement ends function execution and specifies a value to be returned to the function caller. The expression whose value is to be returned. If omitted, undefined is returned instead.",
      "explanationEmphasizes": [
        "return [expression];",
        "undefined"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = 23.45;\nconst result = value.toFixed(1);"
      },
      "answers": [
        "23.4",
        "23.45",
        "23.5",
        "23",
        "24"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "toFixed([count]) returns a string representation of value that does not use exponential notation and has exactly count digits after the decimal place.",
      "explanationEmphasizes": [
        "toFixed([count])",
        " value ",
        " count "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "Which of the method does not exist in Array.prototype?",
      "questionEmphasizes": [
        "Array.prototype"
      ],
      "answers": [
        "call",
        "reduce",
        "map",
        "forEach",
        "slice"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "call() method belongs to Function.prototype.",
      "explanationEmphasizes": [
        "call()",
        "Function.prototype"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const string = \"JavaScript\";\nstring.value = 2009;\nconst result = string.value;"
      },
      "answers": [
        "undefined",
        "2009",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "You cannot set properties to primitive value. If JavaScript detects an attempt to assign a property to a primitive it will indeed coerce the primitive to an object. But this new object has no references and will immediately become fodder for garbage collection.",
      "explanationEmphasizes": [
        "primitive value"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const first = Symbol(\"name\");\nconst second = Symbol(\"name\");\n\nconst result = first === second;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Symbol() function returns a value of type symbol. Every symbol value returned from Symbol() is unique. You can pass a description of the symbol as the first parameter which can be used for debugging but not to access the symbol itself.",
      "explanationEmphasizes": [
        "Symbol()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = typeof false;"
      },
      "answers": [
        "\"boolean\"",
        "false",
        "true",
        "\"null\"",
        "\"number\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The typeof operator returns a string indicating the type of the unevaluated operand. For true or false values it returns boolean.",
      "explanationEmphasizes": [
        "typeof",
        "boolean"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = () => {\nreturn this.value;\n};\n\nconst bounded = func.bind({\nvalue: \"Brendan\"\n});\n\nconst result = bounded();"
      },
      "answers": [
        "undefined",
        "Brendan",
        "throw a SyntaxError",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. But an arrow function does not have its own this; the this value of the enclosing lexical context is used: Window in a browser or Global object in Node.js.",
      "explanationEmphasizes": [
        "bind()",
        "this",
        "arrow function"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "var prop = 1;\nvar prop = 2;\n\nconst result = prop;"
      },
      "answers": [
        "2",
        "1",
        "throw a SyntaxError",
        "null",
        "3"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The var statement declares a variable, optionally initializing it to a value. In JavaScript you can declare variable by var statement with the same name several times.",
      "explanationEmphasizes": [
        " var "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst result = array instanceof Array;"
      },
      "answers": [
        "true",
        "false",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.",
      "explanationEmphasizes": [
        "instanceof"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const proto = {\nname: \"Brendan\"\n};\n\nconst obj = Object.create(proto);\ndelete obj.name;\nconst result = obj.name;"
      },
      "answers": [
        "Brendan",
        "undefined",
        "null",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The delete operator can remove only own property from an object. Property name belongs to prototype of obj.",
      "explanationEmphasizes": [
        " delete ",
        " obj.",
        " name "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Array.isArray(Array);"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Array.isArray() method determines whether the passed value is an instance of Array. But Array is a constructor function to create arrays.",
      "explanationEmphasizes": [
        "Array.isArray()",
        " Array "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const User = function () {};\nUser.prototype = {\nname: \"Brendan\"\n};\nconst user = new User();\nUser.prototype = {\nname: \"James\"\n}\nconst result = user.name;"
      },
      "answers": [
        "\"Brendan\"",
        "\"James\"",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "prototype object is set at the moment when constructor is invoked. You only can change it with Object.setPrototypeOf() or __proto__ property of the object.",
      "explanationEmphasizes": [
        "Object.setPrototypeOf()",
        "__proto__"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\narray[10] = 10;\nconst result = array.length;"
      },
      "answers": [
        "11",
        "10",
        "throw a TypeError",
        "3",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "When setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array's length property accordingly. JavaScript arrays are zero-indexed: the first element of an array is at index 0, and the last element is at the index equal to the value of the array's length property minus 1.",
      "explanationEmphasizes": [
        "will update",
        "accordingly"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const o = {};\no[Symbol.toPrimitive] = (hint) => hint;\n\nconst result = o + 10;"
      },
      "answers": [
        "default10",
        "number10",
        "string10",
        "10",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Symbol.toPrimitive is a symbol that specifies a function valued property that is called to convert an object to a corresponding primitive value. When a primitive conversion is needed, Symbol.toPrimitive is called with a single argument, referred to as hint in the specification. The hint argument is one of three string values. If \"number\" is passed, Symbol.toPrimitive should return a number. If \"string\" is passed, a string should be returned, and if \"default\" is passed, the operation has no preference as to the type.",
      "explanationEmphasizes": [
        "Symbol.toPrimitive",
        "\"number\"",
        "\"string\"",
        "\"default\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = \"JavaScript\";\nstr[0] = \"H\";\nconst result = str;"
      },
      "answers": [
        "JavaScript",
        "HavaScript"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Strings are immutable in JavaScript.",
      "explanationEmphasizes": [
        "immutable"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = {\nvalue: 2009,\nfunc() {\nreturn this.value;\n}\n};\n\nconst result = obj.func.call({\nvalue: 1995\n});"
      },
      "answers": [
        "1995",
        "2009",
        "4004",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The call() method calls a function with a given this value. The this.value inside the func() method will refer to passed object with property value: 1995.",
      "explanationEmphasizes": [
        "call()",
        "this.value",
        "func()",
        "value: 1995"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const doThis = function doThat () {\n// do something\n};\n\nconst result = doThis.name;"
      },
      "answers": [
        "doThat",
        "doThis",
        "undefined",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "doThis.name is doThat because the function expression has a name, and that name takes priority over the variable to which the function was assigned.",
      "explanationEmphasizes": [
        "doThis.name",
        "doThat"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "for (const i = 0; i < 5; i++) {\nconst result = i;\n}"
      },
      "answers": [
        "outputs number 0, then throw TypeError",
        "throw a TypeError",
        "outputs numbers 0, 1, 2, 3, 4",
        "outputs the number \"0\" five times",
        "outputs numbers \"5\" five times"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The i variable is declared as a constant. The first iteration of the loop, where i is 0, executes successfully. An error is thrown when i++ executes because it's attempting to modify a constant. You can only use const to declare a variable in the loop initializer if youâ€™re not modifying that variable.",
      "explanationEmphasizes": [
        " i ",
        " 0",
        " i++ ",
        " const "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const map = {};\nconst cleanMap = Object.create(null);\n\nconst result = map.constructor === cleanMap.constructor;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Object.create() method creates a new object, using an existing object to provide the newly created object's prototype. constructor property is a property of prototype. Object.create(null) creates object without prototype, in that case cleanMap.constructor refers to undefined.",
      "explanationEmphasizes": [
        "Object.create()",
        "Object.create(null)",
        "cleanMap.constructor",
        "undefined"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nlet result = 0;\nfor (const value in array) {\nresult += +value;\n}"
      },
      "answers": [
        "3",
        "0012",
        "6",
        "5",
        "0123"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The for...in statement iterates over all non-Symbol, enumerable properties of an object (or array indexes, not values). The unary plus operator precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already.",
      "explanationEmphasizes": [
        "for...in"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let numbers = [262, 2009, 95];\nlet [ first, second, third ] = numbers;\n\nconst result = second;"
      },
      "answers": [
        "2009",
        "95",
        "262",
        "3",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.",
      "explanationEmphasizes": [
        "destructuring assignment",
        "unpack"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is valid value for x?",
      "questionEmphasizes": [
        "x"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const x = ?;\nconst result = x !== x; // true"
      },
      "answers": [
        "NaN",
        "Infinity",
        "null",
        "undefined",
        "Math.random()"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "NaN compares unequal (via != and !==) to any other value including to another NaN value. Use Number.isNaN() or isNaN() to most clearly determine whether a value is NaN.",
      "explanationEmphasizes": [
        "NaN",
        "Number.isNaN()",
        "isNaN()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 10 > 9 > 8;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Associativity determines the way in which operators of the same precedence are parsed. > operator has left-associativity. 10 > 9 > 8 equals (10 > 9) > 8. (10 > 9) > 8 equals (true) > 8. (true) > 8 converts to 1 > 8. 1 > 8 equals false.",
      "explanationEmphasizes": [
        " > "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const a = [1, 2, 3, 4, 5];\nconst sliced = a.slice(1, a.length - 1);\nconst result = sliced.join(\"\");"
      },
      "answers": [
        "234",
        "23",
        "34",
        "2345",
        "3"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The slice([beginIndex, endIndex]) method returns a shallow copy of a portion of an array into a new array object selected from beginIndex to endIndex (endIndex not included). The original array will not be modified. The join() method joins all elements of an array (or an array-like object) into a string and returns this string.",
      "explanationEmphasizes": [
        "slice([beginIndex, endIndex])",
        "beginIndex",
        "endIndex",
        "join()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "Which of the following method is used to get the last element in array?",
      "questionEmphasizes": [
        "last element"
      ],
      "answers": [
        ".pop()",
        ".push()",
        ".shift()",
        ".unshift()"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",
      "explanationEmphasizes": [
        "pop()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = {};\nObject.defineProperty(obj, \"name\", {\nvalue: \"James\",\nwritable: false\n});\nobj.name = \"Brendan\";\nconst result = obj.name;"
      },
      "answers": [
        "James",
        "Brendan",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The static method Object.defineProperty() defines a new property directly on an object, or modifies an existing property on an object, and returns the object. When writable property of the descriptor is false the value associated with the property may not be changed with an assignment operator.",
      "explanationEmphasizes": [
        "Object.defineProperty()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const plus = +0;\nconst minus = -0;\nconst left = 1 / plus - 1 / minus;\nconst right = 1 / plus + 1 / minus;\nconst result = minus === plus ? left : right;"
      },
      "answers": [
        "Infinity",
        "NaN",
        "-Infinity",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Division by 0 returns Infinity in JavaScript. Division by -0 returns -Infinity. Infinity - -Infinity equals Infinity, but Infinity + -Infinity equals NaN. The === operator treats the number values -0 and +0 as equal.",
      "explanationEmphasizes": [
        "Infinity",
        "-Infinity",
        "NaN",
        "0",
        "-0",
        "+0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const number = 12.3456;\nconst result = number.toPrecision(2);"
      },
      "answers": [
        "12",
        "12.3",
        "12.34",
        "12.35",
        "12.4"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The toPrecision() method returns a string representing the Number object to the specified precision. The toFixed() method formats a number using fixed-point notation. toFixed(n) provides n length after the decimal point; toPrecision(x) provides x total length of the string.",
      "explanationEmphasizes": [
        "toPrecision()",
        "toFixed()",
        "toFixed(n)",
        "toPrecision(x)",
        " n ",
        " x "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const User = function () {};\nUser.prototype[Symbol.toStringTag] = \"Brendan\";\nconst user = new User();\nconst result = user.toString();"
      },
      "answers": [
        "[object Brendan]",
        "[object Object]",
        "User",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Symbol.toStringTag well-known symbol is a string valued property that is used in the creation of the default string description of an object. It is accessed internally by the Object.prototype.toString() method.",
      "explanationEmphasizes": [
        "Symbol.toStringTag",
        "Object.prototype.toString()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = \"ECMAScript\".slice(1, -1);"
      },
      "answers": [
        "CMAScrip",
        "CM",
        "ECMAScrip",
        "CMA"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The slice([beginIndex, endIndex]) method extracts a section of a string and returns it as a new string, without modifying the original string. beginIndex is zero-based index at which to begin extraction. If negative, it is treated as strLength + beginIndex where strLength is the length of the string. endIndex is optional zero-based index before which to end extraction. The character at this index will not be included. If negative, it is treated as strLength + endIndex where strLength is the length of the string.",
      "explanationEmphasizes": [
        "slice([beginIndex, endIndex])",
        "beginIndex",
        "strLength",
        "endIndex"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = new Object();\nconst result = obj.__proto__ instanceof Object;"
      },
      "answers": [
        "false",
        "true",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object. But prototype of obj.__proto__ is null.",
      "explanationEmphasizes": [
        "instanceof",
        "obj.__proto__",
        "null"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let first = 262;\nlet second = 2009;\n\n[first, second] = [second, first];\n\nconst result = first;"
      },
      "answers": [
        "2009",
        "262",
        "throw a TypeError",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. The array destructuring assignment in this example looks like a mirror image. The left side of the assignment (before the equal sign) is a destructuring pattern. The right side is an array literal that is temporarily created for the swap. The destructuring happens on the temporary array, which has the values of first and second copied into its first and second positions. The effect is that the variables have swapped values.",
      "explanationEmphasizes": [
        "destructuring assignment syntax"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst arrayNext = array;\narrayNext.length = 0;\n\nconst result = array[0];"
      },
      "answers": [
        "undefined",
        "1",
        "1,2,3",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "arrayNext and array refer to the same array object. Decreasing the length property delete elements from array.",
      "explanationEmphasizes": [
        "arrayNext",
        " array "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const name = \"Brendan\";\nconst obj = {\n[name]: name\n};\n\nconst result = obj[\"name\"];"
      },
      "answers": [
        "undefined",
        "Brendan",
        "throw a SyntaxError",
        "name",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The object initializer syntax supports computed property names. That allows you to put an expression in brackets [], that will be computed and used as the property name. name evaluates to \"Brendan\" key, not to \"name\" key.",
      "explanationEmphasizes": [
        "\"Brendan\"",
        "\"name\"",
        "[]"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = Object(\"JavaScript\");\nconst result = str.constructor === Object;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Object constructor creates an object wrapper. When the type of the parameter passed to Object constructor is string Object will call String constructor to build the new String object. str.constructor will refer to String constructor function.",
      "explanationEmphasizes": [
        "Object",
        "String",
        "str.constructor"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\narray.push(4);\narray.pop();\nconst result = array.length;"
      },
      "answers": [
        "3",
        "4",
        "2",
        "5",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The push() method adds one or more elements to the end of an array and returns the new length of the array. The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",
      "explanationEmphasizes": [
        "push()",
        "pop()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = -2009;\nconst result = Math.abs(value);"
      },
      "answers": [
        "2009",
        "-2009",
        "1"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Math.abs() function returns the absolute value of a number.",
      "explanationEmphasizes": [
        "Math.abs()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = true + true;"
      },
      "answers": [
        "2",
        "1",
        "0",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "+ operator will convert boolean to a number. true to 1, false to 0.",
      "explanationEmphasizes": [
        "+",
        "1",
        "0",
        "true",
        "false"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = new Array(5);\nconst map = (value, index) => index;\nconst newArray = array.map(map);\nconst result = newArray.join(\"|\");"
      },
      "answers": [
        "||||",
        "0|1|2|3|4",
        "5",
        "0"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "const array = new Array(5) creates an array with undefined pointers. map() calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.",
      "explanationEmphasizes": [
        "const array = new Array(5)",
        "undefined",
        "map()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = \"JavaScript\";\nconst substr = str.substr(1, 4);\nconst substring = str.substring(1, 4);\nconst result = substr.indexOf(substring);"
      },
      "answers": [
        "0",
        "1",
        "4",
        "-1"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The substr() method returns the part of a string between the start index and a number of characters after it. The substring() method returns the part of the string between the start and end indexes, or to the end of the string. The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex.",
      "explanationEmphasizes": [
        "substr()",
        "substring()",
        "indexOf()",
        " String "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const name = \"JavaScript\";\nconst func = function () {\nreturn this.name;\n};\nconst obj = {\nname: \"ECMAScript\",\nfunc: func\n};\nconst result = obj.func();"
      },
      "answers": [
        "ECMAScript",
        "JavaScript",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "this.name inside the func will refer to obj in this case not to the global variable.",
      "explanationEmphasizes": [
        "this.name"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const User = function () {\nreturn User;\n}\nconst result = typeof new new User();"
      },
      "answers": [
        "\"function\"",
        "\"object\"",
        "\"string\"",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function. The object returned by the constructor function becomes the result of the whole new expression. Function is object in JavaScript. In the case User is returned twice instead of this object. And typeof operator returns \"function\" string for functions.",
      "explanationEmphasizes": [
        " User ",
        " this ",
        "typeof",
        "\"function\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const s1 = Symbol.for(\"name\");\nconst s2 = Symbol.for(\"name\");\n\nconst result = s1 === s2;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.",
      "explanationEmphasizes": [
        "Symbol.for(key)"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "// non-strict mode\nfunction func (a, b) {\na = 1;\nconst result = arguments[0];\n};\n\nfunc(4, 5);"
      },
      "answers": [
        "1",
        "4",
        "undefined",
        "5",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "In non-strict mode, the arguments object reflects changes in the named parameters of a function if the parameters passed to function call. In strict mode, the arguments object does not reflect changes to the named parameters.",
      "explanationEmphasizes": [
        "non-strict mode",
        "strict mode"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 2009;\ntry {\nresult = 262;\n} finally {\nresult = 95;\n}"
      },
      "answers": [
        "95",
        "2009",
        "262"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Statements that are executed after the try statement completes. These statements execute regardless of whether an exception was thrown or caught.",
      "explanationEmphasizes": [
        "try statement"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = [1, 2, 3, 4, 5];\nconst value = result.splice(1, 2);\nresult.splice(1, 2, ...value);"
      },
      "answers": [
        "[ 1, 2, 3 ]",
        "[ 2, 3, 4 ]",
        "[ 1, 2, 1, 2, 3 ]",
        "[ 1, 2, 3, 4, 1, 2 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The splice(start[, deleteCount[, item1[, item2[, ...]]]]) method changes the contents of an array by removing existing elements and/or adding new elements. It returns an array containing the deleted elements.",
      "explanationEmphasizes": [
        "splice(start[, deleteCount[, item1[, item2[, ...]]]])"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function (firstParam, secondParam = 3) {\nreturn firstParam + secondParam;\n}\nfunc(2);\n\nconst result = func.length;"
      },
      "answers": [
        "1",
        "undefined",
        "2",
        "5",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The length property specifies the number of arguments expected by the function. This number excludes the rest parameter and only includes parameters before the first one with a default value.",
      "explanationEmphasizes": [
        " length "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const a = [1, 2, 3, 4, 5];\nconst result = a.push(6) - a.pop();"
      },
      "answers": [
        "0",
        "NaN",
        "-1",
        "6"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The push() method adds one or more elements to the end of an array and returns the new length of the array. The pop() method removes the last element from an array and returns that element.",
      "explanationEmphasizes": [
        "push()",
        "pop()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 1 | 2 | 3 | 4;"
      },
      "answers": [
        "7",
        "4",
        "1",
        "8",
        "10"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "| (bitwise OR) performs the OR operation on each pair of bits. a OR b yields 1 if either a or b is 1. 1 | 2 | 3 | 4 = 0001 | 0010 | 0011 | 0100 = 0111. 0111 (base 2) = 7 (base 10).",
      "explanationEmphasizes": [
        "|",
        " a ",
        " b ",
        "0",
        "1",
        "2",
        "3",
        "4",
        "7"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const SimpleNumber = function (value) {\nreturn value;\n}\nconst number = new SimpleNumber(2009);\nconst result = number === 2009;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function. if constructor returns primitive value it will ignore it and will return this object.",
      "explanationEmphasizes": [
        " new ",
        " this "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3, 4, 5, 6];\nconst result = array.copyWithin(3, 0).join(\"\");"
      },
      "answers": [
        "123123",
        "123000",
        "000123",
        "456456"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The copyWithin() method takes up to three arguments target, start and end. The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size. target is zero based index at which to copy the sequence to. start is zero based index at which to start copying elements from. If start is omitted, copyWithin will copy from the start (defaults to 0). end is zero based index at which to end copying elements from. copyWithin() copies up to but not including end. If end is omitted, copyWithin will copy until the end (default to array.length).",
      "explanationEmphasizes": [
        "copyWithin()",
        " target ",
        " start ",
        " end ",
        "array.length"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const a = isFinite(null);\nconst b = Number.isFinite(null);\nconst result = a === b;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Number.isFinite() function determines whether the passed value is a finite number. In comparison to the global isFinite() function, this method doesn't forcibly convert the parameter to a number. This means only values of the type number, that are also finite, return true. If the argument is NaN, positive Infinity, or negative Infinity, this method returns false; otherwise, it returns true.",
      "explanationEmphasizes": [
        "Number.isFinite()",
        "isFinite()",
        "NaN",
        "positive Infinity",
        "negative Infinity"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = {\nfunc: function () {\nreturn this.value;\n},\nvalue: 2009\n};\n\n(function () {\nconst func = arguments[0];\nconst result = typeof func();\n})(obj.func);"
      },
      "answers": [
        "undefined",
        "2009",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The arguments object is an Array-like object corresponding to the arguments passed to a function. arguments[0] refers to obj.func. func is a link to a function without context. So this inside the func will refer to window object in non-strict mode. window has no property with name value.",
      "explanationEmphasizes": [
        " arguments ",
        " Array-like object ",
        "arguments[0]",
        "obj.func",
        " this ",
        " func ",
        " window "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const first = \"JavaScript\";\nconst second = new String(first);\nconst result = first === second;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "first variable is a primitive value and second variable is an object.",
      "explanationEmphasizes": [
        "first ",
        " second "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = typeof add;\n\nfunction add (first, second) {\nreturn first + second;\n};"
      },
      "answers": [
        "function",
        "undefined",
        "throw a ReferenceError",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Block-level functions are hoisted to the top of the block in which they are defined, so typeof add returns \"function\", even though it appears before the function declaration in the code.",
      "explanationEmphasizes": [
        "typeof add",
        "\"function\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "function func (a, b = 2009) {\nb = 262;\nconst result = arguments[1];\n};\n\nfunc(95);"
      },
      "answers": [
        "undefined",
        "2009",
        "262",
        "throw a SyntaxError",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "In non-strict mode, the arguments object reflects changes in the named parameters of a function if the parameters passed to function call. In strict mode, the arguments object does not reflect changes to the named parameters. The arguments object in a function using default parameter values will always behave in the same manner as strict mode regardless of whether the function is explicitly running in strict mode. The presence of default parameter values triggers the arguments object to remain detached from the named parameters.",
      "explanationEmphasizes": [
        "non-strict mode",
        "strict mode"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 0;\nfor (let i = 0; i < 5; i++) {\nif (i % 2) {\nresult += i;\n}\n}"
      },
      "answers": [
        "4",
        "5",
        "6",
        "15",
        "0"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "i % 2 is truthy only for odd numbers.",
      "explanationEmphasizes": [
        "i % 2"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 2009;\nsetTimeout(() => {\nvalue = 262;\n}, 0);\nconst result = value;"
      },
      "answers": [
        "2009",
        "262",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "setTimeout() callback will be invoked after initialization of result variable.",
      "explanationEmphasizes": [
        "setTimeout()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [2, 1, 0, -1, -2];\nconst filter = value => ~value;\nconst result = array.filter(filter);"
      },
      "answers": [
        "[ 2, 1, 0, -2 ]",
        "[ 2, 1, -1, -2 ]",
        "[ 2, 1, 0 ]",
        "[ 2, 1 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The filter() method creates a new array with all elements that pass the test implemented by the provided function. ~ (Bitwise NOT) inverts the bits of its operand. All bits for -1 converts to 0.",
      "explanationEmphasizes": [
        "filter()",
        "~",
        "-1",
        "0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "function *generator() {\nyield 1;\nyield 4;\nyield 9;\n}\nlet result = 0;\n\nfor (const value of generator()) {\nresult += value;\n}"
      },
      "answers": [
        "14",
        "0",
        "36",
        "5"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Generator functions allow you to define an iterative algorithm by writing a single function whose execution is not continuous. Generator functions are written using the function* syntax. When called initially, generator functions do not execute any of their code, instead returning a type of iterator called a Generator. When a value is consumed by calling the generator's next method, the Generator function executes until it encounters the yield keyword.",
      "explanationEmphasizes": [
        "function*",
        "Generator",
        "Generator function",
        "Generator functions"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = \"1\" + 1;"
      },
      "answers": [
        "11",
        "2",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The addition operator produces the sum of numeric operands or string concatenation. Implicit coercion to string is triggered by the binary + operator, when any operand is a string.",
      "explanationEmphasizes": [
        "+"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const User = function (name) {\nthis.name = name;\n};\nconst user1 = new User(\"Brendan\");\nconst user2 = new User(\"Brendan\");\nconst result = user1 === user2;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The new operator creates a new instance of a user-defined object type or of one of the built-in object types that has a constructor function.",
      "explanationEmphasizes": [
        " new "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = new Array(10);\nconst result = array[0];"
      },
      "answers": [
        "undefined",
        "10",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "If the only argument passed to the Array constructor is an integer, this returns a new JavaScript array with its length property set to that number. But there is no values in this array.",
      "explanationEmphasizes": [
        " Array "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst result = array.unshift(0);"
      },
      "answers": [
        "4",
        "[ 0, 1, 2, 3 ]",
        "[ 1, 2, 3 ]",
        "[ 1, 2, 3, 0 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",
      "explanationEmphasizes": [
        "unshift()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = typeof !!null;"
      },
      "answers": [
        "\"boolean\"",
        "\"null\"",
        "false",
        "true",
        "\"undefined\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "! (logical NOT) returns false if its single operand can be converted to true. The typeof operator returns a string indicating the type of the unevaluated operand. For true or false values it returns \"boolean\".",
      "explanationEmphasizes": [
        "typeof",
        "\"boolean\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const check = (value) => value === 2;\nconst result = [1, 2, 3].every(check);"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The every() method tests whether all elements in the array pass the test implemented by the provided function.",
      "explanationEmphasizes": [
        "every()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function () {\nreturn\n{\nname: \"Brendan\"\n};\n};\nconst result = typeof func();"
      },
      "answers": [
        "\"undefined\"",
        "\"string\"",
        "\"object\"",
        "\"null\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The return statement is affected by automatic semicolon insertion. No line terminator is allowed between the return keyword and the expression. In this case function will return undefined instead of object.",
      "explanationEmphasizes": [
        "undefined",
        "return"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const User = function (name) {\nthis.name = name;\n};\n\nconst Brendan = new User(\"Brendan\");\nconst James = new Brendan.constructor(\"James\");\n\nconst result = James instanceof User;"
      },
      "answers": [
        "true",
        "false",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "constructor is a property of User.prototype that refers to User function. All instances of User constructor function have that property. The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.",
      "explanationEmphasizes": [
        "constructor",
        "User.prototype",
        "User",
        "instanceof"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = new Array == false;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Loose equality compares two values for equality, after converting both values to a common type. When one of operand is number and the another one is array then array is converted to primitive value by attempting to invoke varying sequences of toString() and valueOf() methods on array. toString() for array in that case returns empty string \"\". Then we have \"\" == false expression. When one of operand is string and another one is boolean then string is converted to a number by attempting to invoke Number(\"\") and boolean is converted to number by attempting to invoke Number(false). Number(\"\") equals 0. Number(false) equals 0.",
      "explanationEmphasizes": [
        "toString()",
        "valueOf()",
        "\"\"",
        "\"\" == false",
        "Number(\"\")",
        "Number(false)",
        "0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = true > false;"
      },
      "answers": [
        "true",
        "false",
        "null",
        "number"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "> will convert both values to number before comparison. true converts to 1 and false converts to 0.",
      "explanationEmphasizes": [
        ">",
        "0",
        "1"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\narray.concat(4, 5, 6);\nconst result = array;"
      },
      "answers": [
        "[ 1, 2, 3 ]",
        "[ 1, 2, 3, 4, 5, 6 ]",
        "[ 1, 2, 3, 4 ]",
        "[ 4, 5, 6 ]",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays. It returns a new array.",
      "explanationEmphasizes": [
        "concat()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 95;\nconst result = value--;"
      },
      "answers": [
        "95",
        "94",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The decrement operator decrements (subtracts one from) its operand and returns a value. If used postfix (for example, value--), then it returns the value before decrementing. If used prefix (for example, --value), then it returns the value after decrementing.",
      "explanationEmphasizes": [
        "value--",
        "--value"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Number.isInteger(95.0);"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "If the target value is an Integer, return true, otherwise return false. If the value is NaN or Infinite, return false. 95.0 is also interpreted as Integer by Number.isInteger().",
      "explanationEmphasizes": [
        "NaN",
        "95.0",
        "Number.isInteger()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "// non strict mode\nconst obj = {\nname: \"Brendan\"\n};\nObject.seal(obj);\ndelete obj.name;\nconst result = obj.name;"
      },
      "answers": [
        "Brendan",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "delete operator cannot remove properties from sealed object. The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.",
      "explanationEmphasizes": [
        "delete",
        "Object.seal()",
        "non-configurable"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = Math.sqrt(4);"
      },
      "answers": [
        "2",
        "4",
        "8",
        "16"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Math.sqrt() function returns the square root of a number.",
      "explanationEmphasizes": [
        "Math.sqrt()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3, 4, 5];\nconst result = array.splice(1, 2, 3);"
      },
      "answers": [
        "[ 2, 3 ]",
        "[ 1, 2, 3, 4, 5, 1, 2, 3 ]",
        "[ 3, 3, 4, 5 ]",
        "[ 1, 1, 2, 2, 3, 3 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The splice(start[, deleteCount[, item1[, item2[, ...]]]]) method changes the contents of an array by removing existing elements and/or adding new elements. It returns an array containing the deleted elements.",
      "explanationEmphasizes": [
        "splice(start[, deleteCount[, item1[, item2[, ...]]]])"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "Which are primitive data types exist in JavaScript?",
      "questionEmphasizes": [
        "primitive data types"
      ],
      "answers": [
        "number,string,boolean,null,undefined,symbol",
        "number,string,boolean,null,undefined",
        "number,string,boolean,object",
        "number,string,boolean",
        "number,string,array"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "A primitive (primitive value, primitive data type) is data that is not an object and has no methods. In JavaScript, there are 6 primitive data types: string, number, boolean, null, undefined, symbol.",
      "explanationEmphasizes": [
        "string",
        "number",
        "boolean",
        "null",
        "undefined",
        "symbol"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const typedArray = new Int32Array([262, 95]);\nconst array = new Array(262, 95);\n\ntypedArray[2] = 2009;\narray[2] = 2009;\n\nconst result = typedArray[2] === array[2];"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "We can change size of Array with length or [], but cannot do the same for TypedArrays.",
      "explanationEmphasizes": [
        " length ",
        " []",
        "TypedArrays"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = +([+!+[]]+[+[]]);"
      },
      "answers": [
        "10",
        "1",
        "NaN",
        "0",
        "-4"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Lets execute this expression step by step:\n1) initial state: +([+!+[]]+[+[]])\n2) +[] converts to 0 based on coercion rules: +([+!0]+[0])\n3) !0 converts to true: +([+true]+[0])\n4) +true converts to 1: +([1]+[0])\n5) [1] converts to \"1\" string and [0] converts to \"0\" string: +(\"1\"+\"0\")\n6) +(\"10\")\n7) 10.",
      "explanationEmphasizes": [
        "1) ",
        "2) ",
        "3) ",
        "4) ",
        "5) ",
        "6) "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const sym = Symbol(\"key\");\nconst result = Symbol.keyFor(sym);"
      },
      "answers": [
        "undefined",
        "key",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol. There is no such key for symbols created with Symbol(description). \"key\" is just a description for sym.",
      "explanationEmphasizes": [
        "Symbol.keyFor(sym)",
        "Symbol(description)",
        "\"key\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = () => {};\nconst result = func instanceof Object;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object. Functions in JavaScript also are objects. Nearly all objects in JavaScript are instances of Object which sits on the top of a prototype chain.",
      "explanationEmphasizes": [
        "instanceof",
        "Object"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function () {\nreturn value;\nvalue = 2009;\nfunction value () {\nreturn 95;\n};\nvar value = \"Brendan\";\n};\nconst result = typeof func();"
      },
      "answers": [
        "\"function\"",
        "\"string\"",
        "\"number\"",
        "\"object\"",
        "\"undefined\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "In JavaScript, the default action is for declarations to be moved to the top of the code. Declarations are moved to the top of the current scope by the JavaScript interpreter, meaning the top of the current function or scripts. All functions and variables declarations are hoisted.",
      "explanationEmphasizes": [
        "are hoisted"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = \"2009\";\nconst result = Number.isFinite(value);"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Number.isFinite() function determines whether the passed value is a finite number. In comparison to the global isFinite() function, this method doesn't forcibly convert the parameter to a number. This means only values of the type number, that are also finite, return true. If the argument is NaN, positive Infinity, or negative Infinity, this method returns false; otherwise, it returns true.",
      "explanationEmphasizes": [
        "Number.isFinite()",
        "isFinite()",
        "NaN",
        "positive Infinity",
        "negative Infinity"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = \"Brendan\";\nconst result = str instanceof String;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object. In this case instanceof returns false, checks the prototype chain, finds undefined for primitive value \"Brendan\".",
      "explanationEmphasizes": [
        "instanceof",
        "\"Brendan\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const toString = Object.prototype.toString;\nconst result = toString.call(undefined);"
      },
      "answers": [
        "[object Undefined]",
        "[object Object]",
        "undefined",
        "Null",
        "[Object]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The toString() method returns a string representing the object. toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.",
      "explanationEmphasizes": [
        "toString()",
        "Object.prototype.toString()",
        "Function.prototype.call()",
        "Function.prototype.apply()",
        "thisArg"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const tag = (strings, ...vars) => {\nlet array = [];\nlet i = 0;\nwhile (i < vars.length) {\narray.push(strings[i]);\narray.push(vars[i]);\ni++;\n}\narray.push(strings[strings.length - 1]);\nreturn array.join(\"\");\n};\n\nconst variable = \"World\";\nconst result = tag `Hello, ${variable}!`;"
      },
      "answers": [
        "Hello, World!",
        "throw a TypeError",
        "!World Hello,",
        "[object Object]",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "A more advanced form of template literals are tagged templates. Tags allow you to parse template literals with a function. The first argument of a tag function contains an array of string values. The remaining arguments are related to the expressions. In the end, your function can return your manipulated string (or it can return something completely different). The name of the function used for the tag can be whatever you want.",
      "explanationEmphasizes": [
        "template literals",
        "tagged templates"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const { name } = {\nname: \"Brendan\"\n};\n\nconst result = name;"
      },
      "answers": [
        "Brendan",
        "undefined",
        "name",
        "null",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.",
      "explanationEmphasizes": [
        "destructuring assignment",
        "unpack"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let outside = 262;\nconst result = typeof inside;\n\nif (outside) {\nlet inside = 95;\n}"
      },
      "answers": [
        "undefined",
        "throw a ReferenceError",
        "95",
        "null",
        "number"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "let and const have two broad differences from var: 1) they are block scoped. 2) Accessing a var before it is declared has the result undefined; accessing a let or const before it is declared throws ReferenceError. But inside variable is declared only within if statement and typeof returns \"undefined\" in this case.",
      "explanationEmphasizes": [
        "let ",
        " const ",
        " var ",
        "undefined",
        "ReferenceError",
        " inside ",
        " if ",
        " typeof ",
        "\"undefined\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\narray.namedKey = 4;\nlet result = 0;\n\nfor (const key in array) {\nresult += key;\n}"
      },
      "answers": [
        "0012namedKey",
        "6",
        "123",
        "012namedKey"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The for...in statement iterates over all non-Symbol, enumerable properties of an object. key is always a string. Implicit coercion to string is triggered by the binary + operator, when any operand is a string.",
      "explanationEmphasizes": [
        "for...in",
        " key ",
        " + "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const items = [95, 262, 2015, 2009];\nconst noop = (value) => value;\n\nfor (var i = 0; i < items.length; i++) {\nnoop(items[i]);\n}\n\nconst result = i;"
      },
      "answers": [
        "4",
        "throw a ReferenceError",
        "undefined",
        "0",
        "2009"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "i exists out of the for because of hoisting. Hoisting is JavaScript's default behavior of moving all var declarations to the top of the current scope (to the top of the current function or current script).",
      "explanationEmphasizes": [
        "i ",
        " for ",
        " var "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function (firstParam, secondParam = 4) {\nreturn firstParam + secondParam;\n}\n\nconst result = func(2, null);"
      },
      "answers": [
        "2",
        "6",
        "NaN",
        "undefined",
        "8"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed. In the case secondParam will be initialized with null. The addition operator will convert null to 0 based on coercion rules.",
      "explanationEmphasizes": [
        "undefined",
        "secondParam",
        "null",
        "0"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 2009;\nswitch (\"2009\") {\ncase \"2009\":\nresult = 95;\ncase 2009:\nresult = 262;\n}"
      },
      "answers": [
        "262",
        "2009",
        "undefined",
        "95"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case. A case clause used to match against expression. If the expression matches the specified value, the statements inside the case clause are executed until either the end of the switch statement or a break. There is no break in this case.",
      "explanationEmphasizes": [
        "no break"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst copy = array.reverse();\nconst result = copy === array;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The reverse() method reverses an array in place and returns the same array. The first array element becomes the last, and the last array element becomes the first.",
      "explanationEmphasizes": [
        "reverse()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 32;\nconst result = value << 1;"
      },
      "answers": [
        "64",
        "16",
        "31",
        "-32"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "<< operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right. Bitwise shifting any number x to the left by y bits yields x * (2 ** y).",
      "explanationEmphasizes": [
        "<<"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 2009;\n\nfunction func() {\ninner();\nreturn;\nfunction inner() {\nresult = 262;\n}\n}\nfunc();"
      },
      "answers": [
        "262",
        "2009",
        "throw a ReferenceError",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "In JavaScript, the default action is for declarations to be moved to the top of the code. Declarations are moved to the top of the current scope by the JavaScript interpreter, meaning the top of the current function or scripts. All functions and variables declared by var are hoisted.",
      "explanationEmphasizes": [
        " var "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 11 % 3;"
      },
      "answers": [
        "2",
        "1",
        "0",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The % operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.",
      "explanationEmphasizes": [
        "%"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 4, 9];\nconst result = 2 in array;"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The in operator returns true if the specified property (not value) is in the specified object (array is an object too) or its prototype chain. 2 is a valid index of the array.",
      "explanationEmphasizes": [
        " in ",
        " 2 "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "// non strict mode\nconst obj = {\nname: \"JavaScript\"\n};\nObject.freeze(obj);\nobj.name = \"ECMAScript\";\nconst result = obj.name;"
      },
      "answers": [
        "JavaScript",
        "ECMAScript",
        "null",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed, it also prevents the prototype from being changed.",
      "explanationEmphasizes": [
        "Object.freeze()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const a = [\"10\", \"10\", \"10\"];\nconst result = a.map(parseInt);"
      },
      "answers": [
        "[ 10, NaN, 2 ]",
        "[ 10, 10, 10 ]",
        "[ 2, 2, 2 ]",
        "[ NaN, NaN, NaN ]",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The callback function in map() method has three parameters: the value of the element, the index of the element, and the Array object being traversed. parseInt() takes two parameters: the value to parse and an optional radix value. For each iteration of map, parseInt() is being passed two parameters: the string and radix. parseInt(\"10\", 0) equals 10, because 0 is equivalent to falsy in JavaScript, so it defaults to base 10. parseInt(\"10\", 1) equals NaN, because radix must be a value from 2 to 56. parseInt(\"10\", 2) equals 2.",
      "explanationEmphasizes": [
        "map()",
        "parseInt()",
        "parseInt(\"10\", 0)",
        "parseInt(\"10\", 1)",
        "parseInt(\"10\", 2)"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst result = array.concat([4], [5]);"
      },
      "answers": [
        "[ 1, 2, 3, 4, 5 ]",
        "[ 1, 2, 3, [4], [5]]",
        "5",
        "true",
        "[ 1, 2, 3 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array. The concat() method creates a new array consisting of the elements in the object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).",
      "explanationEmphasizes": [
        "concat()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 5 == \"5\";"
      },
      "answers": [
        "true",
        "false",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "== (loose equality) compares two values for equality, after converting both values to a common type. In the case string \"5\" will be converted to number 5 before comparison.",
      "explanationEmphasizes": [
        "==",
        "\"5\"",
        "5"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const func = function fName() {\nreturn 2009;\n};\nconst result = typeof fName;"
      },
      "answers": [
        "\"undefined\"",
        "\"function\"",
        "\"number\"",
        "\"null\"",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "A Function object's read-only name property indicates the function's name as specified when it was created, or anonymous for functions created anonymously. fName only available inside the function with the name.",
      "explanationEmphasizes": [
        "fName"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "Which of the following is right syntax for arrow function?",
      "questionEmphasizes": [
        "arrow function"
      ],
      "answers": [
        "() => {}",
        "() -> {}",
        "() > {}",
        "() ==> {}"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "An arrow function expression has a shorter syntax than a function expression and does not have its own this, arguments, super, or new.target. These function expressions are best suited for non-method functions, and they cannot be used as constructors.",
      "explanationEmphasizes": [
        "arrow function"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const a = [1, 2, 3, 4, 5];\nconst result = a.shift() - a.pop();"
      },
      "answers": [
        "-4",
        "4",
        "0",
        "6"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The shift() method removes the first element from an array and returns that removed element. The pop() method removes the last element from an array and returns that element.",
      "explanationEmphasizes": [
        "shift()",
        "pop()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = \"JavaScript is not Java\";\nconst result = str.replace(\"Java\", \"ECMA\");"
      },
      "answers": [
        "ECMAScript is not Java",
        "ECMAScript is not ECMA",
        "JavaScript is not Java",
        "ECMA",
        "JavaScript is not ECMA"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The replace() method searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced. If the first parameter is a string (and not a regular expression), only the first instance of the string will be replaced.",
      "explanationEmphasizes": [
        "replace()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const User = function () {\nreturn {\nvalueOf() {\nreturn 95;\n}\n}\n};\n\nconst result = new User() + new User();"
      },
      "answers": [
        "190",
        "[object Object][object Object]",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Implicit coercion to number is triggered by the binary + operator, when both operand is not a string. Both numeric and string conversion make use of two methods of the input object: valueOf() and toString(). Numeric conversion first calls valueOf() with a fallback to toString(). String conversion does the opposite: toString() followed by valueOf().",
      "explanationEmphasizes": [
        " + ",
        "toString()",
        "valueOf()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const isTrue = new Boolean(false);\nlet result = false;\nif (isTrue) {\nresult = true;\n}"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "new Boolean() creates boolean object. All objects converts to true in JavaScript boolean context.",
      "explanationEmphasizes": [
        "new Boolean()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = NaN !== NaN;"
      },
      "answers": [
        "true",
        "false",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "NaN compares unequal (via != and !==) to any other value including to another NaN value. Use Number.isNaN() or isNaN() to most clearly determine whether a value is NaN.",
      "explanationEmphasizes": [
        "NaN",
        "Number.isNaN()",
        "isNaN()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nconst result = array.includes(2);"
      },
      "answers": [
        "true",
        "false",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The includes() method determines whether an array includes a certain element, returning true or false as appropriate.",
      "explanationEmphasizes": [
        "includes()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = (1 && 2) || (0 && 3);"
      },
      "answers": [
        "2",
        "1",
        "3",
        "0",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "&& (logical AND) returns left operand if it can be converted to false; otherwise, returns right operand. || (logical OR) returns left operand if it can be converted to true; otherwise, returns right operand.",
      "explanationEmphasizes": [
        "&&",
        "||",
        "true",
        "false",
        "right operand",
        "left operand"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\ndelete array[1];\nconst map = (value, index) => index;\nconst result = array.map(map);"
      },
      "answers": [
        "[ 0, undefined, 2 ]",
        "[ 0, 1, 2 ]",
        "[ 1, 2, 3 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "map() calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values, including undefined. It is not called for missing elements of the array (that is, indexes that have never been set, which have been deleted or which have never been assigned a value).",
      "explanationEmphasizes": [
        "map()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result in a browser?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "var prop = 95;\nconst result = window.prop;"
      },
      "answers": [
        "95",
        "undefined",
        "throw a ReferenceError",
        "null",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "When var is used in the global scope, it creates a new global variable, which is a property on the global object (Window in browsers). That means you can accidentally overwrite an existing global using var, as this code does.",
      "explanationEmphasizes": [
        " var "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const obj = {\nvalue: 2009\n};\nconst func = function () {\nthis.value = 262;\n}\nfunc.call(obj);\nconst result = obj.value;"
      },
      "answers": [
        "262",
        "2009",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The call() method calls a function with a given this value. this represents obj in this case and function modifies it.",
      "explanationEmphasizes": [
        "call()",
        " obj "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = typeof NaN;"
      },
      "answers": [
        "\"number\"",
        "\"object\"",
        "\"null\"",
        "\"undefined\"",
        "\"NaN\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The ECMAScript standard states that Numbers should be IEEE-754 floating point data. This includes Infinity, -Infinity, and also NaN. It is still a numeric data type, but it is undefined as a real number.",
      "explanationEmphasizes": [
        "IEEE-754",
        "Infinity",
        "-Infinity",
        "NaN"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const variable = \"World\";\nconst str = `Hello, ${variable}!`;\n\nconst result = str;"
      },
      "answers": [
        "Hello, World!",
        "Hello, ${World}!",
        "Hello, variable!",
        "Hello, !",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "str is a template literal. Template literals are string literals allowing embedded expressions. ${} construction lets you to insert any expression inside a string.",
      "explanationEmphasizes": [
        "str ",
        "${}"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = typeof value;\nlet value = 11;"
      },
      "answers": [
        "throw a ReferenceError",
        "\"undefined\"",
        "11",
        "null",
        "\"number\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "let and const have two broad differences from var: 1) they are block scoped. 2) Accessing a var before it is declared has the result undefined; accessing a let or const before it is declared throws ReferenceError even for typeof operator.",
      "explanationEmphasizes": [
        "let ",
        "const ",
        "var",
        "undefined",
        "typeof",
        "ReferenceError"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const typedArray = new Int32Array();\nconst result = typedArray.BYTES_PER_ELEMENT;"
      },
      "answers": [
        "4",
        "2",
        "1",
        "0"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The TypedArray.BYTES_PER_ELEMENT property represents the size in bytes of each element in an typed array. For Int32Array the value is 4.",
      "explanationEmphasizes": [
        "TypedArray.BYTES_PER_ELEMENT",
        "Int32Array",
        "4"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result in a browser?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let prop = 95;\nconst result = window.prop;"
      },
      "answers": [
        "undefined",
        "95",
        "throw a ReferenceError",
        "null",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The let declaration does not create a property on the global object (var does). This lack of global object modification makes let and const much safer to use in the global than var declaration.",
      "explanationEmphasizes": [
        "let ",
        "var ",
        "const "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [5, 1, 3, 4, 2];\nconst result = array.sort((a, b) => b - a);"
      },
      "answers": [
        "[ 5, 4, 3, 2, 1 ]",
        "[ 1, 2, 3, 4, 5 ]",
        "[ 5, 1, 3, 4, 2 ]",
        "[ 2, 4, 3, 1, 5 ]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The array.sort([compareFunction]) method sorts the elements of an array in place and returns the array. If compareFunction is supplied, all non-undefined array elements are sorted according to the return value of the compare function. If compareFunction(a, b) is less than 0 then a comes before b. If compareFunction(a, b) is greater than 0 then b comes before a. If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other.",
      "explanationEmphasizes": [
        "array.sort([compareFunction])",
        "compareFunction(a, b)"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = \"{\\\"name\\\":\\\"Brendan\\\"}\";\nconst json = JSON.parse(str);\nconst result = json.name;"
      },
      "answers": [
        "Brendan",
        "undefined",
        "throw a ReferenceError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string.",
      "explanationEmphasizes": [
        "JSON.parse()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let value = 2009;\nif (value > 1) {\nlet value = 262;\n}\nconst result = value;"
      },
      "answers": [
        "2009",
        "262",
        "1"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The let statement declares a block scope local variable, optionally initializing it to a value. The second variable with name value is visible only inside if statement.",
      "explanationEmphasizes": [
        "let ",
        "value "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 3,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\nObject.setPrototypeOf(array, Object);\nconst result = array instanceof Array;"
      },
      "answers": [
        "false",
        "true",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object. In this case it replaces Array.prototype to Object.prototype. The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object and does not find Array.prototype.",
      "explanationEmphasizes": [
        "Object.setPrototypeOf()",
        "[[Prototype]]",
        "Array.prototype",
        "Object.prototype",
        "instanceof"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = typeof Object;"
      },
      "answers": [
        "\"function\"",
        "\"object\"",
        "\"Object\"",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The Object constructor creates an object wrapper. Constructor is a function. typeof returns \"function\" for any function.",
      "explanationEmphasizes": [
        "Object",
        "typeof",
        "\"function\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const toString = Object.prototype.toString;\nconst result = toString.call([]);"
      },
      "answers": [
        "[object Array]",
        "[object Object]",
        "[]",
        "toString",
        "[Object]"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The toString() method returns a string representing the object. toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.",
      "explanationEmphasizes": [
        "toString()",
        "Object.prototype.toString()",
        "Function.prototype.call()",
        "Function.prototype.apply()",
        "thisArg"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = 1.2e3;"
      },
      "answers": [
        "1200",
        "1234",
        "throw a SyntaxError",
        "123",
        "12000"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Floating-point values can be represented using e-notation. E-notation indicates a number that should be multiplied by 10 raised to a given power. The format of e-notation in Javascript is to have a number, integer or floating-point, followed by e or E, then by the power of 10 to multiply by.",
      "explanationEmphasizes": [
        "e-notation",
        "E-notation"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const value = 2009;\nconst result = eval(\"value + value\");"
      },
      "answers": [
        "4018",
        "2009",
        "undefined",
        "NaN"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The eval() function evaluates JavaScript code represented as a string. eval() is a dangerous function, which executes the code it's passed with the privileges of the caller. Do not ever use eval at all.",
      "explanationEmphasizes": [
        "eval()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const check = (value) => value === 2;\nconst result = [1, 2, 3].some(check);"
      },
      "answers": [
        "true",
        "false"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The some() method tests whether at least one element in the array passes the test implemented by the provided function.",
      "explanationEmphasizes": [
        "some()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 0,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const array = [1, 2, 3];\narray.length = 0;\nconst result = array[0];"
      },
      "answers": [
        "undefined",
        "1",
        "3",
        "NaN",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The length property of an object which is an instance of type Array sets or returns the number of elements in that array. You can set the length property to truncate an array at any time. When you extend an array by changing its length property, the number of actual elements increases; for example, if you set length to 3 when it is currently 2, the array now contains 3 elements, which causes the third element to be undefined.",
      "explanationEmphasizes": [
        " length ",
        " undefined"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const doThis = function doThat () {\n// do something\n};\n\nconst result = doThis.bind().name;"
      },
      "answers": [
        "bound doThat",
        "bound doThis",
        "doThat",
        "doThis",
        "throw a SyntaxError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "If the function expression has a name that name takes priority over the variable to which the function was assigned. The name of a bound function will always be the name of the function being bound prefixed with the string \"bound \" so the bound version is \"bound doThat\".",
      "explanationEmphasizes": [
        "\"bound \"",
        "\"bound doThat\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const arr = new Array(1, 2, 3);\nconst result = typeof arr;"
      },
      "answers": [
        "\"object\"",
        "\"array\"",
        "\"function\"",
        "3",
        "undefined"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "typeof returns \"object\" for arrays in JavaScript. Use Array.isArray() or Object.prototype.toString.call() to differentiate regular objects from arrays.",
      "explanationEmphasizes": [
        "typeof",
        "\"object\"",
        "Array.isArray()",
        "Object.prototype.toString.call()"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 1,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "let result = 2009;\ntry {\nresult = 262 / 0;\n} catch (e) {\nresult = 0 / 262;\n}"
      },
      "answers": [
        "Infinity",
        "2009",
        "0",
        "throw a TypeError"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Division by 0 returns Infinity in JavaScript. There is no error.",
      "explanationEmphasizes": [
        "0",
        "Infinity"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const str = new String(\"Brendan\");\nconst result = \"valueOf\" in str;"
      },
      "answers": [
        "true",
        "false",
        "undefined",
        "null"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "The in operator returns true if the specified property is in the specified object or its prototype chain. \"valueOf\" refers to valueOf() method of String.prototype.",
      "explanationEmphasizes": [
        " in ",
        "\"valueOf\"",
        "valueOf()",
        "String.prototype"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const variable = 1;\nconst result = typeof typeof variable;"
      },
      "answers": [
        "\"string\"",
        "\"null\"",
        "\"undefined\"",
        "\"number\"",
        "\"1\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "typeof variable will return \"number\" string. typeof \"number\" is \"string\".",
      "explanationEmphasizes": [
        "typeof",
        "\"number\"",
        "\"string\""
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const first = 2009;\nconst second = new Number(first);\nconst result = first === second;"
      },
      "answers": [
        "false",
        "true"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "first variable is a primitive value and second variable is an object.",
      "explanationEmphasizes": [
        "first",
        "second"
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "function* generator(a, b, c) {\nfor (let i = 0; i < 5; i++) {\nyield i;\n}\n}\nlet result = 0;\nfor (const value of generator()) {\nresult += value;\n}"
      },
      "answers": [
        "10",
        "15",
        "36",
        "5",
        "0"
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Generator functions allow you to define an iterative algorithm by writing a single function whose execution is not continuous. Generator functions are written using the function* syntax. When called initially, generator functions do not execute any of their code, instead returning a type of iterator called a Generator. When a value is consumed by calling the generator's next() method, the Generator function executes until it encounters the yield keyword.",
      "explanationEmphasizes": [
        "Generator function",
        "Generator functions",
        "function*",
        "Generator",
        "next()",
        " yield "
      ],
      "metaInformation": {
        "isChecked": true
      }
    },
    {
      "rank": 2,
      "topics": [
        "JavaScript"
      ],
      "question": "What is the value of result?",
      "questionEmphasizes": [
        "result"
      ],
      "textCode": {
        "language": "JavaScript",
        "code": "const result = typeof `${{Object}}`.prototype;"
      },
      "answers": [
        "\"undefined\"",
        "\"string\"",
        "\"function\"",
        "\"object\""
      ],
      "countOfCorrectAnswers": 1,
      "explanation": "Primitive value does not have prototype property (there are no properties at all).",
      "explanationEmphasizes": [
        "Primitive value",
        "prototype"
      ],
      "metaInformation": {
        "isChecked": true
      }
    }
  ]
}
